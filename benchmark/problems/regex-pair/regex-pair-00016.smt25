(declare-fun var0 () String)
(assert (str.in.re var0 (re.++ (re.+ (re.+ (str.to.re "ss"))) (re.++ (re.* (re.union (str.to.re "qqq") (str.to.re "rr"))) (re.++ (re.union (re.+ (str.to.re "n")) (re.union (str.to.re "oo") (str.to.re "p"))) (re.++ (re.union (re.* (str.to.re "ll")) (re.+ (str.to.re "m"))) (re.++ (re.+ (re.union (str.to.re "jjj") (str.to.re "kkk"))) (re.++ (re.union (re.* (str.to.re "hhh")) (re.* (str.to.re "ii"))) (re.++ (re.+ (re.* (str.to.re "gg"))) (re.++ (re.+ (re.+ (str.to.re "fff"))) (re.++ (re.union (re.* (str.to.re "c")) (re.union (str.to.re "ddd") (str.to.re "ee"))) (re.++ (re.* (re.* (str.to.re "b"))) (re.++ (re.+ (re.union (str.to.re "999") (str.to.re "a"))) (re.++ (re.+ (re.union (str.to.re "7") (str.to.re "88"))) (re.++ (re.* (re.union (str.to.re "5") (str.to.re "6"))) (re.++ (re.+ (re.union (str.to.re "333") (str.to.re "4"))) (re.++ (re.+ (re.+ (str.to.re "222"))) (re.union (re.* (str.to.re "000")) (re.* (str.to.re "1"))))))))))))))))))))
(assert (not (str.in.re var0 (re.++ (re.union (re.union (str.to.re "qq") (str.to.re "rr")) (re.+ (str.to.re "sss"))) (re.++ (re.+ (re.union (str.to.re "o") (str.to.re "pp"))) (re.++ (re.* (re.union (str.to.re "m") (str.to.re "nnn"))) (re.++ (re.+ (re.* (str.to.re "l"))) (re.++ (re.+ (re.union (str.to.re "jj") (str.to.re "kk"))) (re.++ (re.* (re.+ (str.to.re "i"))) (re.++ (re.union (re.* (str.to.re "ggg")) (re.+ (str.to.re "hh"))) (re.++ (re.* (re.* (str.to.re "f"))) (re.++ (re.* (re.* (str.to.re "ee"))) (re.++ (re.+ (re.* (str.to.re "dd"))) (re.++ (re.union (re.union (str.to.re "999") (str.to.re "aaa")) (re.union (str.to.re "bb") (str.to.re "cc"))) (re.++ (re.+ (re.union (str.to.re "777") (str.to.re "888"))) (re.++ (re.+ (re.+ (str.to.re "666"))) (re.++ (re.* (re.+ (str.to.re "55"))) (re.++ (re.* (re.* (str.to.re "444"))) (re.union (re.union (str.to.re "00") (str.to.re "1")) (re.union (str.to.re "2") (str.to.re "333")))))))))))))))))))))
(check-sat)